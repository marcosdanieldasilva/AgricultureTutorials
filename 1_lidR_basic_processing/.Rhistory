acs1 <- acs(simple2, A = 27, a = 0.1, rn = TRUE)
data("est2")
DT::datatable(est2, options=list(pageLength = 5), class = 'white-space: nowrap')
ace1 <- ace(est2, a = 0.1, aj = c(12.6, 10.2))
DT::datatable(ace1$`tabela aux`, options=list(pageLength = 5), class = 'white-space: nowrap')
ace1 <- ace(est2, a = 0.1, aj = c(12.6, 10.2), ampl = 2, prop = T)
DT::datatable(ace1$`tabela aux`, options=list(pageLength = 5), class = 'white-space: nowrap')
ace1$`distribuicao diam`
ace1$`grafico ivi`
data(simple2)
cc <- as.data.frame.matrix(table(simple2$Plot, simple2$Specie))
DT::datatable(cc, options=list(pageLength = 5), class = 'white-space: nowrap')
diversityresult(cc, index='richness') #riqueza
diversityresult(cc, index='abundance') #abundância
diversityresult(cc, index='richness') #riqueza
library(vegan)
library(BiodiversityR)
library(florestal)
library(factoextra)
library(ggplot2)
data(simple2)
cc <- as.data.frame.matrix(table(simple2$Plot, simple2$Specie))
DT::datatable(cc, options=list(pageLength = 5), class = 'white-space: nowrap')
diversityresult(cc, index='richness') #riqueza
diversity(cc)
diversityresult(cc)
diversityresult(simple2$Plot, simple2$Specie)
diversityresult
library(vegan)
data(dune.env)
data(dune)
diversityresult(dune, y=NULL, index="Shannon", method="each site",
sortit=TRUE, digits=5)
View(dune)
View(dune.env)
View(simple2)
cc
data(cc)
data(simple2)
cc <- as.data.frame.matrix(table(simple2$Plot, simple2$Specie))
data(cc)
View(cc)
cc
View(dune)
View(cc)
View(dune.env)
diversityresult(dune, y=NULL, index="Shannon", method="each site",
sortit=TRUE, digits=5)
", method="each site",
diversityresult(cc, y=NULL, index="Shannon", method="each site",
sortit=TRUE, digits=5)
diversityresult(cc, index='richness') #riqueza
diversityresult(cc, y=NULL, index='richness') #riqueza
diversityresult(cc, y=NULL, index='Shannon') #riqueza
diversityresult(cc, y=NULL, index="richness", method="each site",
sortit=TRUE, digits=5) # riqueza
diversityresult(cc, y=NULL, index="abundance", method="each site",
sortit=TRUE, digits=5) # abundância
View(dune.env)
pa <- as.matrix(1 * (cc > 0)) #cria uma matriz de presença-ausência
d <- vegdist(pa, method = "jaccard")
d
res.hc <- hclust(d, method = "average")
fviz_dend(res.hc)
res.coph <- cophenetic(res.hc) #computa a distância cofenética
cor(d, res.coph) #correlação entre a distância original e a distância cofenética
fviz_dend(res.hc, k = 3,              #Corta o dendrograma em 3 grupos
color_labels_by_k = TRUE,   #Colore os rótulos por grupo
rect = TRUE) +              #Adiciona um retângulo em volta dos grupos
ggtitle("") +                     #Título do gráfico
xlab("Parcela") +                 #Nomeia o eixo x
ylab("Distância cofenética")      #Nomeia o eixo y
View(cc)
data(simple2)
force(simple2)
data(simple2)
simple2
View(simple2)
fito <- fito(sp = simple1$Specie, plot = simple1$Plot, d = simple1$Diameter, A = 27)
DT::datatable(fito$`parametros fito`, options=list(pageLength = 5), class = 'white-space: nowrap')
View(simple1)
fito()
fito <- fito(sp = simple1$Specie, plot = simple1$Plot, d = simple1$Diameter, A = 27)
fito
library(vegan)
library(BiodiversityR)
# library(florestal)
library(factoextra)
library(ggplot2)
library(magrittr)
library(officer)
library(dplyr)
library(tidyr)
library(flextable)
library(data.table)
library(DT)
install.packages("magrittr")
install.packages("officer")
library(DT)
fito <- fito(sp = simple1$Specie, plot = simple1$Plot, d = simple1$Diameter, A = 27)
DT::datatable(fito$`parametros fito`, options=list(pageLength = 5), class = 'white-space: nowrap')
ito$`grafico ivi`
fito$`grafico ivi`
fito <- fito(sp = est1$Specie, plot = est1$Plot, d = est1$Diameter, stratum = est1$Stratum, A = 27)
DT::datatable(fito$`parametros fito`, options=list(pageLength = 5), class = 'white-space: nowrap')
fito$`grafico ivi`
cc<-as.data.frame.matrix(table(simple1$Plot, simple1$Specie))
DT::datatable(cc, options=list(pageLength = 5), class = 'white-space: nowrap')
sp1 <- accumresult(cc, method = "collector")
sp1
accumplot(sp1, xlab = "Parcelas", ylab = "Riqueza")
ggplot(h1) +
geom_line(aes(x = p, y = r)) +
theme_minimal() +
xlab("\nParcelas") +
ylab("Riqueza\n")
accumplot(sp1, xlab = "Parcelas", ylab = "Riqueza")
h1 <- data.frame(r = sp1$richness, p = sp1$sites)
ggplot(h1) +
geom_line(aes(x = p, y = r)) +
theme_minimal() +
xlab("\nParcelas") +
ylab("Riqueza\n")
sp2 <- accumresult(cc, method = "random", permutations = 100)
sp2
accumplot(sp2, xlab = "Parcelas", ylab = "Riqueza")
ggplot(h2, aes(x = p, y = r)) +
geom_line() +
geom_ribbon(aes(ymin = r-sd*2, ymax = r+sd*2), alpha = 0.2) +
theme_minimal() +
xlab("\nParcelas") +
ylab("Riqueza\n") +
theme(axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
h2 <- data.frame(r = sp2$richness, p = sp2$sites, sd = sp2$sd)
ggplot(h2, aes(x = p, y = r)) +
geom_line() +
geom_ribbon(aes(ymin = r-sd*2, ymax = r+sd*2), alpha = 0.2) +
theme_minimal() +
xlab("\nParcelas") +
ylab("Riqueza\n") +
theme(axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10),
axis.title.x = element_text(size = 12),
axis.title.y = element_text(size = 12))
sp5 <- accumresult(cc, method = "rarefaction")
sp5
h5 <- data.frame(r = sp5$richness, p = sp5$individuals, sd = sp5$sd)
ggplot(h5, aes(x = p, y = r)) +
geom_ribbon(aes(ymin = r-sd*2, ymax = r+sd*2), alpha = 0.8, fill = "black") +
geom_line(size = 1, colour = "red") +
theme_minimal() +
xlab("\nIndivíduos") +
ylab("Riqueza\n")
sp1 <- accumresult(cc, method = "collector")
sp5 <- accumresult(cc, method = "rarefaction")
hh <- data.frame(rr = sp5$richness, rc = sp1$richness, p = sp5$individuals, sd = sp5$sd)
ggplot(hh)+
geom_line(aes(x = p, y = rr, color = "rr")) +
geom_ribbon(aes(x = p, ymin = rr-sd*2, ymax = rr+sd*2, fill = "sd"), alpha = 0.2)+
geom_line(aes(x = p, y = rc, color = "rc")) +
theme_minimal()+
scale_colour_manual("",
breaks = c("rr", "rc"),
labels = c("Curva de rarefação", "Curva do coletor"),
values = c("black", "red")) +
scale_fill_manual("",
breaks = "sd", labels = "Desvio-padrão", values = "grey") +
xlab("\nIndivíduos")+
ylab("Riqueza\n")
1+1
20+20 #soma
20-20 #subtracao
20*20 #multiplicacao
20/20 #divisao
20^2 #potenciacao
10<2 #menor que
10>2 #maior que
10<=2 #menor ou igual que
10>=2 #maior ou igual que
10==2 #igual a
10!=2 #diferente de
(((sqrt(1234*2)^2)/3*18/3-23)^2) * (((sqrt(1234*2)^2)/3*18/3-23)/12) #ha como reduzir numeros grandes?
a = (((sqrt(1234*2)^2)/3*18/3-23)^2) * (((sqrt(1234*2)^2)/3*18/3-23)/12) #cria um objeto "a"
a #exibe o objeto "a"
print(a) #exibe o objeto "a"
x <- TRUE
y <- FALSE
print (xy)
20+20 #soma
install.packages("agricolae")
library(agricolae)
1+1
20+20 #soma
1+1
1+1
1+1
20-20
1+1
20-20
20-20
1+1
20-20
# isso é um comentário
1+1
# isso é um comentário 1+1
1+1
# isso é um comentário 1+1
#
1+1
# isso é um comentário 1+1
#
0
log(1)
log10(1)
log10(100)
log(100)
exp(log(100))
exp(log10(100))
(log10(100))^10
fx(x) = 2x
f(x) = 2*x
exp(log(100))
exp(log10(100))
# operadores boleanos
10>2
10<2
2.0 >= 2
2.1 >= 2
2.1 = 2
2.1 == 2
2.0 == 2
pi
pi
pi(2)
a = 2
a
4*a
a <- 2
b -< c(1,5)
b <- c(1,5)
b
b
b <- c(1,5)
b
c <- c(1.5, 5)
c
c <- c(1, 5)
c
c <- c(1.0, 5)
c
c <- c(1.5, 5)
c
c <- c(-1, 0, 1)
c
d <- -1:1
d
e <- -20.5:0.5:500
e <- -20.5:500
e
e <- -20.5:0.5:500
e <- c("parcela a", "parcela b", "parcela c")
e
e[1]
e[3]
e[end]
a*c
diametro <- c(7.4, 8.2, 16.4, 5.2, 19.7, 12.3)
altura <- c(24.2, 20.0, 13.4, 16.5, 19.2, 18.0)
matrizporlinha <- rbind(diametro, altura)
View(matrizporlinha) #visualizar a matriz
matrizporlinha <- cbind(diametro, altura)
View(matrizporlinha) #visualizar a matriz
matrizporlinha <- cbind(diametro, altura)
View(matrizporlinha) #visualizar a matriz
diametro <- c(7.4, 8.2, 16.4, 5.2, 19.7, 12.3)
altura <- c(24.2, 20.0, 13.4, 16.5, 19.2, 18.0)
matriz <- cbind(diametro, altura)
matriz <- cbind(diametro, altura)
matriz <- cbind(diametro, altura)
View(matriz) #visualizar a matriz
a
a <- 2
b <- c(1,5)
b
c <- c(-1, 0, 1)
c
d <- -1:1
e <- c("parcela a", "parcela b", "parcela c")
e[1]
e[3]
a*c
diametro <- c(7.4, 8.2, 16.4, 5.2, 19.7, 12.3)
altura <- c(24.2, 20.0, 13.4, 16.5, 19.2, 18.0)
matriz <- cbind(diametro, altura)
View(matriz)
View(matriz)
View(matriz) #visualizar a matriz
class(matriz) #verifique a classe da matriz
dim(matriz) #verifique a dimensao da matriz
matriz[1,1]
View(matriz)
matriz[6,2]
matriz[, "altura"]
matriz$altura
mean(diametro)
media_diametro <- mean(diametro)
media_diametro
peso <- 60.0
altura <- 1.55
imc <- peso / altura^2
imc
funcao_imc <- function(peso, altura){
imc <- peso / altura^2
return imc
return(imc)
return imc
imc <- peso / (altura^2)
# Criando uma matriz com pesos (kg) e alturas (m)
set.seed(123) # para reprodutibilidade
pesos <- round(runif(10, 50, 100), 1)   # 10 pesos entre 50 e 100 kg
alturas <- round(runif(10, 1.5, 2.0), 2) # 10 alturas entre 1.50 e 2.00 m
dados <- cbind(pesos, alturas) # matriz 10x2
colnames(dados) <- c("Peso_kg", "Altura_m")
# Calculando o IMC para cada pessoa
imc <- funcao_imc(dados[, "Peso_kg"], dados[, "Altura_m"])
# Calculando o IMC para cada pessoa
imc <- funcao_imc(dados[, "Peso_kg"], dados[, "Altura_m"])
dados <- cbind(pesos, alturas) # matriz 10x2
colnames(dados) <- c("Peso_kg", "Altura_m")
# Calculando o IMC para cada pessoa
imc <- funcao_imc(dados[, "Peso_kg"], dados[, "Altura_m"])
funcao_imc <- function(peso, altura){
imc <- peso / (altura^2)
return(imc)
}
# Criando uma matriz com pesos (kg) e alturas (m)
set.seed(123) # para reprodutibilidade
pesos <- round(runif(10, 50, 100), 1)   # 10 pesos entre 50 e 100 kg
alturas <- round(runif(10, 1.5, 2.0), 2) # 10 alturas entre 1.50 e 2.00 m
dados <- cbind(pesos, alturas) # matriz 10x2
colnames(dados) <- c("Peso_kg", "Altura_m")
# Calculando o IMC para cada pessoa
imc <- funcao_imc(dados[, "Peso_kg"], dados[, "Altura_m"])
# Adicionando o IMC na matriz
dados_com_imc <- cbind(dados, IMC = round(imc, 2))
# Visualizando resultado
print(dados_com_imc)
pesos
funcao_imc(70.0, 1.80)
pesos <- round(runif(10, 50, 100), 1)   # 10 pesos entre 50 e 100 kg
alturas <- round(runif(10, 1.5, 2.0), 2) # 10 alturas entre 1.50 e 2.00 m
dados <- cbind(pesos, alturas) # matriz 10x2
colnames(dados) <- c("Peso_kg", "Altura_m")
# Calculando o IMC para cada pessoa
imc <- funcao_imc(dados[, "Peso_kg"], dados[, "Altura_m"])
# Adicionando o IMC na matriz
dados_com_imc <- cbind(dados, IMC = round(imc, 2))
# Visualizando resultado
print(dados_com_imc)
# Visualizando resultado
print(dados_com_imc)
funcao_imc <- function(peso, altura){
imc <- peso / (altura^2)
1+1
}
funcao_imc(70.0, 1.80)
return(imc)
funcao_imc <- function(peso, altura){
imc <- peso / (altura^2)
1+1
return(imc)
}
funcao_imc(70.0, 1.80)
funcao_imc <- function(peso, altura){
imc <- peso / (altura^2)
return(imc)
}
funcao_imc <- function(peso, altura){
imc <- peso / (altura^2)
return(imc)
}
funcao_imc(70.0, 1.80)
# Criando uma matriz com pesos (kg) e alturas (m)
set.seed(123) # para reprodutibilidade
pesos <- round(runif(10, 50, 100), 1)   # 10 pesos entre 50 e 100 kg
alturas <- round(runif(10, 1.5, 2.0), 2) # 10 alturas entre 1.50 e 2.00 m
dados <- cbind(pesos, alturas) # matriz 10x2
View(dados)
View(dados)
pesos <- round(runif(10, 50, 100), 1)   # 10 pesos entre 50 e 100 kg
alturas <- round(runif(10, 1.5, 2.0), 2) # 10 alturas entre 1.50 e 2.00 m
# Calculando o IMC para cada pessoa
imc <- funcao_imc(dados[, "pesos"], dados[, "alturas"])
# Adicionando o IMC na matriz
dados_com_imc <- cbind(dados, IMC = round(imc, 2))
View(dados_com_imc)
# Criando uma matriz com pesos (kg) e alturas (m)
pesos <- round(runif(10, 50, 100), 1)   # 10 pesos entre 50 e 100 kg
alturas <- round(runif(10, 1.5, 2.0), 2) # 10 alturas entre 1.50 e 2.00 m
dados <- cbind(pesos, alturas)
# Calculando o IMC para cada pessoa
imc <- funcao_imc(dados[, "pesos"], dados[, "alturas"])
# Calculando o IMC para cada pessoa
imc <- funcao_imc(pesos, alturas)
imc
dados <- cbind(pesos, alturas)
# Calculando o IMC para cada pessoa
imc <- funcao_imc(dados[, "pesos"], dados[, "alturas"])
# Adicionando o IMC na matriz
dados_com_imc <- cbind(dados, IMC = round(imc, 2))
View(dados_com_imc)
# Visualizando resultado
print(dados_com_imc)
View(dados_com_imc)
# You may need other packages first:
install.packages(c('terra','mapview','sf','stars','caret','mapedit','devtools',"dplyr","fields","leafem","leafsync","lwgeom","BiocManager","git2r","exactextractr"))
# You may need other packages first:
install.packages(c('terra','mapview','sf','stars','caret','mapedit','devtools',"dplyr","fields","leafem","leafsync","lwgeom","BiocManager","git2r","exactextractr"))
BiocManager::install("EBImage")
# load libraries
library(lidR)
library(sp)
library(raster)
library(rgdal)
# read the las file in R inside the 'las' object
las = readLAS(las_fname)
# load libraries
library(lidR)
library(sp)
library(raster)
library(rgdal)
library(rgl)
library(mapview)
library(gstat)
library(sp)
library(lidR)
library(raster)
library(rgl)
library(mapview)
library(gstat)
# plot the point cloud
## This can take a while in slower computers OR if the las file is big. In this example the Las file is not big.
## I suggest maximizing after plotting for better visualization
plot(las, legend=T)
# load libraries
library(lidR)
library(sp)
library(raster)
library(rgdal)
library(rgl)
library(mapview)
library(gstat)
# set working directory to the directory of the script
setwd("C:\\Users\\marco\\OneDrive\\Documents\\Graduação - Engenharia Florestal\\Special Topics in Spatio temporal data analysis\\1_lidR_basic_processing")
# set las filename
## This example .las file is a point cloud tile of ~250 x 250 meters
## .las and .laz are the main file types to store point cloud data, the 'z' means it is 'zipped'
las_fname = "ORIG_NP_T-0262__638250_8876250.las"
# colors for plotting
hgt_col = height.colors(50)
# read the las file in R inside the 'las' object
las = readLAS(las_fname)
# print the basic spatial information of the 'las' object
## Note that it says the CRS (coordinate reference system) of this data, area, total number of points, and density of points
## This is a small area and we have >381.000 points !
print(las)
# print the LAS Header
## This header is standard for las files and can be seen in any software that works with LAS files
## You can check additional info
print(las@header)
# visualize the data frame inside the las file
## Note that the Classification column is all zeroed, i.e. points are not yet classified (ground, vegetation, etc.)
## You can see additional info on the LAS format in http://www.asprs.org/wp-content/uploads/2010/12/LAS_1_4_r13.pdf
View(las@data)
# plot the point cloud
## This can take a while in slower computers OR if the las file is big. In this example the Las file is not big.
## I suggest maximizing after plotting for better visualization
plot(las, legend=T)
las_fname = "test_recor_model_cave.las"
# colors for plotting
hgt_col = height.colors(50)
# read the las file in R inside the 'las' object
las = readLAS(las_fname)
# set working directory to the directory of the script
setwd("C:\\Users\\marco\\OneDrive\\Documents\\Julia\\AgricultureTutorials\\1_lidR_basic_processing")
las_fname = "test_recor_model_cave.las"
# colors for plotting
hgt_col = height.colors(50)
# read the las file in R inside the 'las' object
las = readLAS(las_fname)
# print the basic spatial information of the 'las' object
## Note that it says the CRS (coordinate reference system) of this data, area, total number of points, and density of points
## This is a small area and we have >381.000 points !
print(las)
# print the LAS Header
## This header is standard for las files and can be seen in any software that works with LAS files
## You can check additional info
print(las@header)
# visualize the data frame inside the las file
## Note that the Classification column is all zeroed, i.e. points are not yet classified (ground, vegetation, etc.)
## You can see additional info on the LAS format in http://www.asprs.org/wp-content/uploads/2010/12/LAS_1_4_r13.pdf
View(las@data)
# plot the point cloud
## This can take a while in slower computers OR if the las file is big. In this example the Las file is not big.
## I suggest maximizing after plotting for better visualization
plot(las, legend=T)
# plot the point cloud with intensity overlay
## What are the differences?
plot(las, color = "Intensity", legend=T)
